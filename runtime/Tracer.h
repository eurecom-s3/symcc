
#ifndef SYMRUNTIME_TRACER_H
#define SYMRUNTIME_TRACER_H

#include "GarbageCollection.h"
#include "Runtime.h"
#include <cstdint>
#include <fstream>
#include <nlohmann/json.hpp>

/**
 * Generates a trace of the symbolic execution.
 *
 * A trace contains a list of symbolic memory snapshots, a list of path constraints and a list of expressions.
 * The trace is written to a json file at the end of the execution.
 */
class Tracer {
public:
  /**
   * Adds a dump of the current symbolic state to the trace.
   */
  static void traceStep(uintptr_t pc);

  /**
   * Adds a path constraint to the trace.
   */
  static void tracePathConstraint(SymExpr constraint, bool taken);

  /**
   * Adds an input generated by the symbolic backend.
   * The input is associated to the last path constraint.
   */
  static void traceNewInput(const unsigned char* input, size_t size);

  /**
   * Generates a json file containing the trace.
   * Must be called before the program exits.
   */
  static void writeTraceToDisk();

private:
  /**
   * Collects all expressions reachable from the given expression.
   */
  static void recursivelyCollectExpressions(const shared_ptr<qsym::Expr>&expressionPtr);

  /**
   * Generates a string ID from the address of the given expression.
   */
  static string getExpressionID(SymExpr expression);

  static nlohmann::json currentTrace;
  static nlohmann::json expressions;
  static nlohmann::json pathConstraints;
  static const std::string BACKEND_TRACE_FILE;
};

#endif // SYMRUNTIME_TRACER_H
